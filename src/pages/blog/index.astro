---
import BaseHead from '../../components/BaseHead.astro';
import Canonical from '../../components/Canonical.astro';
import Header from '../../components/Header.astro';
import Footer from '../../components/Footer.astro';
import FormattedDate from '../../components/FormattedDate.astro';
import { SITE_TITLE } from '../../consts';

// ⬇️ importe aussi le type
import { getCollection, type CollectionEntry } from 'astro:content';

type Post = CollectionEntry<'blog'>;

const cleanId = (id: string) =>
  id.replace(/^ia\//, '').replace(/^\d{4}-\d{2}-\d{2}-/, '');

const hrefFor = (p: Post) => `/${cleanId(p.id)}`;

const allPosts = await getCollection('blog');

// tri du plus récent au plus ancien
const posts = allPosts
  .slice()
  .sort((a: Post, b: Post) => {
    const da = (a.data as any).pubDate ? new Date((a.data as any).pubDate).getTime() : 0;
    const db = (b.data as any).pubDate ? new Date((b.data as any).pubDate).getTime() : 0;
    return db - da;
  });
---

<html lang="fr">
  <head>
    <BaseHead title={`${SITE_TITLE} — Blog`} description="Tous les articles" />
    <Canonical />
  </head>
  <body>
    <Header />
    <main class="container">
      <h1>Derniers articles</h1>

      {posts.length === 0 ? (
        <p>Aucun article pour le moment.</p>
      ) : (
      <ul class="post-list">
        {posts.map((p: Post) => (
          <li class="post-item">
            <a class="post-link" href={hrefFor(p)}>
                {p.data.heroImage && (
                  <img
                    src={p.data.heroImage}
                    alt={p.data.heroImageAlt || p.data.title}
                    loading="lazy"
                    decoding="async"
                    width="640"
                    height="360"
                  />
                )}
                <h3>{p.data.title}</h3>
                <div class="meta">
                  <FormattedDate date={(p.data as any).pubDate} />
                </div>
              </a>
            </li>
          ))}
        </ul>
      )}
    </main>
    <Footer />

    <style>
      .container { max-width: 1100px; margin: 2rem auto; padding: 0 1rem; }

      /* grille responsive : 1 → 2 → 3 colonnes */
      .post-list {
        list-style: none; padding: 0; margin: 0;
        display: grid; gap: 1.25rem;
        grid-template-columns: repeat(1, minmax(0, 1fr));
      }
      @media (min-width: 640px) {
        .post-list { grid-template-columns: repeat(2, minmax(0, 1fr)); }
      }
      @media (min-width: 1024px) {
        .post-list { grid-template-columns: repeat(3, minmax(0, 1fr)); }
      }

      .post-item {
        background: rgba(0, 0, 0, 0.04);
        border-radius: 12px;
        overflow: hidden;
        transition: transform .15s ease;
      }
      .post-item:hover { transform: translateY(-3px); }

      .post-link { display: block; text-decoration: none; color: inherit; }
      .post-link img { width: 100%; height: auto; display: block; aspect-ratio: 16/9; object-fit: cover; }
      .post-link h3 { margin: .75rem 1rem .25rem; font-size: 1.05rem; line-height: 1.35; }
      .meta { margin: 0 1rem 1rem; color: #64748b; font-size: .9rem; }
    </style>
  </body>
</html>
