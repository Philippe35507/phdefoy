---
import type { HTMLAttributes } from 'astro/types';
type Props = HTMLAttributes<'a'>;

const { href, class: className, ...props } = Astro.props as Props;

// normalise le chemin courant
const raw = Astro.url.pathname.replace(import.meta.env.BASE_URL, '');
const pathname = raw !== '/' ? raw.replace(/\/$/, '') : '/';

// utilitaires
const norm = (p: string) => (p === '/' ? '/' : p.replace(/\/+$/, ''));

// ⚠️ href peut être string | URL | undefined → on force un string
const hrefStr  = typeof href === 'string' ? href : (href ? href.toString() : '/');
const hrefNorm = norm(hrefStr);

// actif si exact ou sous-chemin
const isActive = hrefNorm === pathname || (hrefNorm !== '/' && pathname.startsWith(hrefNorm + '/'));
---
<a href={hrefStr} class:list={[className, { active: isActive }]} {...props}>
  <slot />
</a>
<style>
  a { display: inline-block; text-decoration: none; }
  a.active { font-weight: bolder; text-decoration: underline; }
</style>
