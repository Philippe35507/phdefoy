---
/**
 * <Canonical /> — génère:
 *   <link rel="canonical" ...> + <meta property="og:url" ...>
 *
 * Props :
 * - href?: string        → URL canonique forcée (optionnelle)
 * - ensureSlash?: boolean
 *      true  → force un slash final (ex: /article/)
 *      false → force sans slash final (ex: /article)
 *      undefined → respecte la forme actuelle d’Astro
 */
 interface Props {
  href?: string;
  ensureSlash?: boolean;
}
const { href, ensureSlash } = Astro.props;

// Récupère la base du site (fonctionne avec Astro.site = string | URL | undefined)
const siteStr = (Astro.site
  ? (typeof Astro.site === 'string' ? Astro.site : Astro.site.href)
  : '') as string;

const base = (siteStr || Astro.url.origin).replace(/\/+$/, ''); // enlève le / final éventuel

// Path courant (sans index.html)
let pathname = (Astro.url.pathname || '/').replace(/index\.html?$/i, '');

// Ajuste trailingSlash selon la prop
if (ensureSlash === true && !pathname.endsWith('/')) {
  pathname += '/';
}
if (ensureSlash === false && pathname !== '/' && pathname.endsWith('/')) {
  pathname = pathname.slice(0, -1);
}

// URL finale
const canonical = href ?? `${base}${pathname}`;
---

<link rel="canonical" href={canonical} />
<meta property="og:url" content={canonical} />
